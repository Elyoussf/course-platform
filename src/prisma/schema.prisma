generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  emailVerified DateTime?
  name          String?
  student       Boolean?
  teacher       Boolean?
  image         String?
  accounts      Account[]
  sessions      Session[]
  courses       UserCourse[]   // updated for M:N relationship
  createdCourses Course[]      @relation("UserCreatedCourses")
}

model Course {
  id           String        @id @default(cuid())
  title        String
  description  String
  SubCourses   SubCourse[]
  price        Float
  otherDetails Json
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  users        UserCourse[]
  creatorId    String
  numberofsubscribed Int  //Needs to be incremented for evry purchase
  creator      User          @relation("UserCreatedCourses", fields: [creatorId], references: [id], onDelete: Cascade)
}
model SubCourse {
  id          String   @id @default(cuid())
  title       String
  description String
  link        String
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model UserCourse {
  userId      String
  courseId    String
  subscribedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId]) // composite primary key
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
